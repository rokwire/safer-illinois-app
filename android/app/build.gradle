/*
 * Copyright 2020 Board of Trustees of the University of Illinois.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '2.2.1'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keysProperties = new Properties()
def keysPropertiesFile = rootProject.file('keys.properties')
if (keysPropertiesFile.exists()) {
    keysPropertiesFile.withReader('UTF-8') { reader ->
        keysProperties.load(reader)
    }
}

apply plugin: 'io.fabric'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

repositories{
    mavenCentral()
}

android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "edu.illinois.covid"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                mapsApiKey  : "${keysProperties.getProperty('googleMapsApiKey')}",
                backupApiKey: "${keysProperties.getProperty('androidBackupApiKey')}"
        ]
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    if (isRunningOnTravis) {
        // configure keystore
        println 'travis-ci release build'
        signingConfigs {
            release {
                storeFile file("../../android-releasekey.keystore")
                storePassword System.getenv("androidkeystore_password") ?: "androidstore_passwd"
                keyAlias System.getenv("androidkeystore_alias") ?: "androidkeystore_alias"
                keyPassword System.getenv("androidkeystore_alias_password") ?: "androidkeystore_alias_password"
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a'
                }
            }
        }
    } else {
        buildTypes {
            release {
                // Add your own signing config for the release build.
                // Signing with the debug keys for now, so `flutter run --release` works.
                signingConfig signingConfigs.debug
                minifyEnabled true
                shrinkResources true

                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a'
                }
            }
        }
    }
}

play {
    track = 'alpha'
    serviceAccountCredentials = file("../../google-playstore-apikey.json")
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //Common dependencies
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.android.volley:volley:1.1.1'
    //Firebase
    implementation 'com.google.firebase:firebase-core:17.2.3'
    implementation 'com.google.firebase:firebase-analytics:17.2.3'
    implementation 'com.google.firebase:firebase-messaging:20.1.3'
    //Crashlytics
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    //end Common

    //Google Maps
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    //end Google Maps

    //Google Maps Utils
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    //end Google Maps Utils

    //Zxing
    implementation 'com.google.zxing:core:3.3.0' //Use zxing 3.3.0 because we have minSdk < 24
    implementation ('com.journeyapps:zxing-android-embedded:4.1.0@aar') { transitive = false }

    //BlinkID
    implementation('com.microblink:blinkid:5.3.0@aar') {
        transitive = true
    }

    // BLESSED - BLE library used for Exposures
    implementation 'com.github.weliem:blessed-android:1.19'
}

apply plugin: 'com.google.gms.google-services'